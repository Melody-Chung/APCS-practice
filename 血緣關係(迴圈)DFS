#include <iostream>
#include <vector>
using namespace std;

void dfs(vector<int> adj[],int root,int A[]){
    for(int i=0; i<adj[root].size(); i++){
        if(A[adj[root][i]]==-1||A[adj[root][i]]>A[root]+1){
            A[adj[root][i]]=A[root]+1;
            dfs(adj, adj[root][i], A);
        }
    }
}
int main()
{
    int n, p, q, c;
    while(cin >> n){
        vector<int> adj[n];
        for(int i=0; i<n-1; i++){
            cin >> p;
            cin >> q;
            adj[p].push_back(q);
            adj[q].push_back(p);
        }
        
        int A[n];
        for(int i=0; i<n; i++){
            A[i]=-1;
        }
        
        A[0]=0;
        dfs(adj, 0, A);
        int max=0;
        c=0;
        for(int i=0; i<n; i++){
            if(max<A[i]){
                c=i;
                max=A[i];
            }
        }
        for(int i=0; i<n; i++){
            A[i]=-1;
        }
        A[c]=0;
        dfs(adj, c, A);
        max=0;
        for(int i=0; i<n; i++){
            if(max<A[i]){
                max=A[i];
            }
        }
        cout << max << endl;
    }

    return 0;
}


