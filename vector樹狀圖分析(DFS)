#include <iostream>
#include <vector>
using namespace std;

void dfs(vector<long long int> P[],long long int root,long long int A[]){
    if(P[root].size()==0){
        A[root]=0;
    }
    else{
        for(long long int i=0; i<P[root].size(); i++){
            dfs(P, P[root][i], A);
        }
        for(long long int i=0; i<P[root].size(); i++){
            if(A[P[root][i]]+1>A[root]){
                A[root]=A[P[root][i]]+1;
            }
        }
    }
    
    
}
int main()
{
    long long int n, m, k, root, sum=0, i, j;
    cin >> n;
    long long int A[n];
    for(i=0; i<n; i++){
        A[i]=0;
    }
    vector <long long int> P[n];
    for(i=0; i<n; i++){
       cin >> m;
       for(j=0; j<m; j++){
           cin >> k;
           P[i].push_back(k-1);
           A[k-1]=1;
       }
    }
    for(i=0; i<n; i++){
        if(A[i]==0){
            root=i;
        }
        A[i]=0;
    }
    cout << root+1 << endl;
    dfs(P, root, A);
    for(i=0; i<n; i++){
        sum+=A[i];
    }
    cout << sum;
    return 0;
}
